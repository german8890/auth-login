apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName}}
  labels:
    app: {{ .Values.appName}}
    version: "v{{ .Chart.AppVersion }}"
    app.kubernetes.io/name: {{ .Values.appName}}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/version: "v{{ .Chart.AppVersion }}"
spec:
  revisionHistoryLimit: 0
  progressDeadlineSeconds: 120
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
  selector:
    matchLabels:
      app: {{ .Values.appName}}
      app.kubernetes.io/name: {{ .Values.appName}}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Values.appName}}
        version: "v{{ .Chart.AppVersion }}"
        app.kubernetes.io/name: {{ .Values.appName}}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/version: "v{{ .Chart.AppVersion }}"
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        traffic.sidecar.istio.io/excludeOutboundIPRanges: "{{ .Values.istio.workloadIdentityExclude }}"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 30
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ .Values.appName}}
              topologyKey: failure-domain.beta.kubernetes.io/zone
          - weight: 20
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ .Values.appName}}
              topologyKey: beta.kubernetes.io/instance-type
          - weight: 10
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ .Values.appName}}
              topologyKey: kubernetes.io/hostname
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
      serviceAccountName: {{ .Values.serviceAccount.name }}
      containers:
        - name: "{{ .Values.appName}}"
          image: "{{ if eq .Values.appEnvironment "prd" }}{{ .Values.image.url.prd }}:{{ .Chart.AppVersion }}{{ else }}{{ .Values.image.url.nonprd }}:{{ .Chart.AppVersion }}{{ end }}"
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 10001
            runAsGroup: 10001
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop: 
                - ALL
          envFrom:
          {{- if .Values.gsm.enabled }}
          {{- range .Values.gsm.externalSecret }}
          - secretRef:
              name: "{{ .k8sTarget }}"
          {{- end }}
          {{- end }}
          {{- if .Values.gitlab.enabled }}
          {{- range .Values.gitlab.externalSecret }}
          - secretRef:
              name: "{{ .k8sTarget }}"
          {{- end }}
          {{- end }}
          env:
            {{- if .Values.variables.enabled }}
            {{- range .Values.variables.values }}
            - name: "{{ .name }}"
              value: "{{ .value }}"
            {{- end }}
            {{- end }}
            - name: API_VS
              value: "v{{ .Chart.AppVersion }}"
            - name: CI_ENVIRONMENT_RUN
              value: "{{ .Values.appEnvironment }}"
            - name: CONTEXT_PATH
              value: "{{ .Values.contextPath }}"
            - name: NODE_PORT
              value: "{{ .Values.service.targetPort }}"
            - name: NODE_GRPC_PORT
              value: "{{ .Values.service.grpcTargetPort }}"
            - name: NODE_ENV
              value: "{{ .Values.appEnvironment }}"
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: "deployment.environment={{ $.Values.appEnvironment }}, service.version=v{{ $.Chart.AppVersion }}, library.language={{ $.Values.sourceCode }}"
            - name: OTEL_SERVICE_NAME
              value: {{ .Values.appName}}
            - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
              value: "{{ .Values.otelCollector }}"
            - name: SERVER_PORT
              value: "{{ .Values.service.port }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.targetPort }}
            - containerPort: {{ .Values.service.grpcTargetPort }}
          livenessProbe:
            httpGet:
              path: "{{ .Values.contextPath }}{{ .Values.livenessProbe.path }}"
              port: {{ .Values.service.targetPort }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: "{{ .Values.contextPath }}{{ .Values.readinessProbe.path }}"
              port: {{ .Values.service.targetPort }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      restartPolicy: Always
      {{- with .Values.hostAliases }}
      hostAliases:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}